Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT

Grammar

Rule 0     S' -> script
Rule 1     script -> if script
Rule 2     script -> if
Rule 3     if -> IF assignment block
Rule 4     if -> IF assignment block ELSE block
Rule 5     if -> assignment
Rule 6     assignment -> ATOM EQ call
Rule 7     assignment -> call
Rule 8     call -> ATOM LPAREN call_args RPAREN
Rule 9     call -> ATOM LPAREN RPAREN
Rule 10    call -> list
Rule 11    list -> LBRACKET RBRACKET
Rule 12    list -> LBRACKET call_args RBRACKET
Rule 13    list -> scenario
Rule 14    scenario -> SCENARIO ATOM block
Rule 15    scenario -> basic_expr
Rule 16    block -> LBRACE script RBRACE
Rule 17    block -> LBRACE RBRACE
Rule 18    call_args -> script COMMA call_args
Rule 19    call_args -> script
Rule 20    basic_expr -> STRING
Rule 21    basic_expr -> ATOM
Rule 22    basic_expr -> DOLLAR ATOM

Terminals, with rules where they appear

ATOM                 : 6 8 9 14 21 22
COLON                : 
COMMA                : 18
COMMENT              : 
DOLLAR               : 22
ELSE                 : 4
EQ                   : 6
IF                   : 3 4
LBRACE               : 16 17
LBRACKET             : 11 12
LPAREN               : 8 9
RBRACE               : 16 17
RBRACKET             : 11 12
RPAREN               : 8 9
SCENARIO             : 14
STRING               : 20
error                : 

Nonterminals, with rules where they appear

assignment           : 3 4 5
basic_expr           : 15
block                : 3 4 4 14
call                 : 6 7
call_args            : 8 12 18
if                   : 1 2
list                 : 10
scenario             : 13
script               : 1 16 18 19 0

Parsing method: LALR

state 0

    (0) S' -> . script
    (1) script -> . if script
    (2) script -> . if
    (3) if -> . IF assignment block
    (4) if -> . IF assignment block ELSE block
    (5) if -> . assignment
    (6) assignment -> . ATOM EQ call
    (7) assignment -> . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    IF              shift and go to state 3
    ATOM            shift and go to state 5
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    script                         shift and go to state 1
    if                             shift and go to state 2
    assignment                     shift and go to state 4
    call                           shift and go to state 6
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 1

    (0) S' -> script .



state 2

    (1) script -> if . script
    (2) script -> if .
    (1) script -> . if script
    (2) script -> . if
    (3) if -> . IF assignment block
    (4) if -> . IF assignment block ELSE block
    (5) if -> . assignment
    (6) assignment -> . ATOM EQ call
    (7) assignment -> . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    $end            reduce using rule 2 (script -> if .)
    COMMA           reduce using rule 2 (script -> if .)
    RBRACKET        reduce using rule 2 (script -> if .)
    RPAREN          reduce using rule 2 (script -> if .)
    RBRACE          reduce using rule 2 (script -> if .)
    IF              shift and go to state 3
    ATOM            shift and go to state 5
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    if                             shift and go to state 2
    script                         shift and go to state 14
    assignment                     shift and go to state 4
    call                           shift and go to state 6
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 3

    (3) if -> IF . assignment block
    (4) if -> IF . assignment block ELSE block
    (6) assignment -> . ATOM EQ call
    (7) assignment -> . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    ATOM            shift and go to state 5
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    assignment                     shift and go to state 15
    call                           shift and go to state 6
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 4

    (5) if -> assignment .

    IF              reduce using rule 5 (if -> assignment .)
    ATOM            reduce using rule 5 (if -> assignment .)
    LBRACKET        reduce using rule 5 (if -> assignment .)
    SCENARIO        reduce using rule 5 (if -> assignment .)
    STRING          reduce using rule 5 (if -> assignment .)
    DOLLAR          reduce using rule 5 (if -> assignment .)
    $end            reduce using rule 5 (if -> assignment .)
    COMMA           reduce using rule 5 (if -> assignment .)
    RBRACKET        reduce using rule 5 (if -> assignment .)
    RPAREN          reduce using rule 5 (if -> assignment .)
    RBRACE          reduce using rule 5 (if -> assignment .)


state 5

    (6) assignment -> ATOM . EQ call
    (8) call -> ATOM . LPAREN call_args RPAREN
    (9) call -> ATOM . LPAREN RPAREN
    (21) basic_expr -> ATOM .

    EQ              shift and go to state 16
    LPAREN          shift and go to state 17
    IF              reduce using rule 21 (basic_expr -> ATOM .)
    ATOM            reduce using rule 21 (basic_expr -> ATOM .)
    LBRACKET        reduce using rule 21 (basic_expr -> ATOM .)
    SCENARIO        reduce using rule 21 (basic_expr -> ATOM .)
    STRING          reduce using rule 21 (basic_expr -> ATOM .)
    DOLLAR          reduce using rule 21 (basic_expr -> ATOM .)
    $end            reduce using rule 21 (basic_expr -> ATOM .)
    COMMA           reduce using rule 21 (basic_expr -> ATOM .)
    RBRACKET        reduce using rule 21 (basic_expr -> ATOM .)
    RPAREN          reduce using rule 21 (basic_expr -> ATOM .)
    RBRACE          reduce using rule 21 (basic_expr -> ATOM .)
    LBRACE          reduce using rule 21 (basic_expr -> ATOM .)


state 6

    (7) assignment -> call .

    IF              reduce using rule 7 (assignment -> call .)
    ATOM            reduce using rule 7 (assignment -> call .)
    LBRACKET        reduce using rule 7 (assignment -> call .)
    SCENARIO        reduce using rule 7 (assignment -> call .)
    STRING          reduce using rule 7 (assignment -> call .)
    DOLLAR          reduce using rule 7 (assignment -> call .)
    $end            reduce using rule 7 (assignment -> call .)
    COMMA           reduce using rule 7 (assignment -> call .)
    RBRACKET        reduce using rule 7 (assignment -> call .)
    RPAREN          reduce using rule 7 (assignment -> call .)
    RBRACE          reduce using rule 7 (assignment -> call .)
    LBRACE          reduce using rule 7 (assignment -> call .)


state 7

    (10) call -> list .

    IF              reduce using rule 10 (call -> list .)
    ATOM            reduce using rule 10 (call -> list .)
    LBRACKET        reduce using rule 10 (call -> list .)
    SCENARIO        reduce using rule 10 (call -> list .)
    STRING          reduce using rule 10 (call -> list .)
    DOLLAR          reduce using rule 10 (call -> list .)
    $end            reduce using rule 10 (call -> list .)
    COMMA           reduce using rule 10 (call -> list .)
    RBRACKET        reduce using rule 10 (call -> list .)
    RPAREN          reduce using rule 10 (call -> list .)
    RBRACE          reduce using rule 10 (call -> list .)
    LBRACE          reduce using rule 10 (call -> list .)


state 8

    (11) list -> LBRACKET . RBRACKET
    (12) list -> LBRACKET . call_args RBRACKET
    (18) call_args -> . script COMMA call_args
    (19) call_args -> . script
    (1) script -> . if script
    (2) script -> . if
    (3) if -> . IF assignment block
    (4) if -> . IF assignment block ELSE block
    (5) if -> . assignment
    (6) assignment -> . ATOM EQ call
    (7) assignment -> . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    RBRACKET        shift and go to state 18
    IF              shift and go to state 3
    ATOM            shift and go to state 5
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    call_args                      shift and go to state 19
    script                         shift and go to state 20
    if                             shift and go to state 2
    assignment                     shift and go to state 4
    call                           shift and go to state 6
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 9

    (13) list -> scenario .

    IF              reduce using rule 13 (list -> scenario .)
    ATOM            reduce using rule 13 (list -> scenario .)
    LBRACKET        reduce using rule 13 (list -> scenario .)
    SCENARIO        reduce using rule 13 (list -> scenario .)
    STRING          reduce using rule 13 (list -> scenario .)
    DOLLAR          reduce using rule 13 (list -> scenario .)
    $end            reduce using rule 13 (list -> scenario .)
    COMMA           reduce using rule 13 (list -> scenario .)
    RBRACKET        reduce using rule 13 (list -> scenario .)
    RPAREN          reduce using rule 13 (list -> scenario .)
    RBRACE          reduce using rule 13 (list -> scenario .)
    LBRACE          reduce using rule 13 (list -> scenario .)


state 10

    (14) scenario -> SCENARIO . ATOM block

    ATOM            shift and go to state 21


state 11

    (15) scenario -> basic_expr .

    IF              reduce using rule 15 (scenario -> basic_expr .)
    ATOM            reduce using rule 15 (scenario -> basic_expr .)
    LBRACKET        reduce using rule 15 (scenario -> basic_expr .)
    SCENARIO        reduce using rule 15 (scenario -> basic_expr .)
    STRING          reduce using rule 15 (scenario -> basic_expr .)
    DOLLAR          reduce using rule 15 (scenario -> basic_expr .)
    $end            reduce using rule 15 (scenario -> basic_expr .)
    COMMA           reduce using rule 15 (scenario -> basic_expr .)
    RBRACKET        reduce using rule 15 (scenario -> basic_expr .)
    RPAREN          reduce using rule 15 (scenario -> basic_expr .)
    RBRACE          reduce using rule 15 (scenario -> basic_expr .)
    LBRACE          reduce using rule 15 (scenario -> basic_expr .)


state 12

    (20) basic_expr -> STRING .

    IF              reduce using rule 20 (basic_expr -> STRING .)
    ATOM            reduce using rule 20 (basic_expr -> STRING .)
    LBRACKET        reduce using rule 20 (basic_expr -> STRING .)
    SCENARIO        reduce using rule 20 (basic_expr -> STRING .)
    STRING          reduce using rule 20 (basic_expr -> STRING .)
    DOLLAR          reduce using rule 20 (basic_expr -> STRING .)
    $end            reduce using rule 20 (basic_expr -> STRING .)
    COMMA           reduce using rule 20 (basic_expr -> STRING .)
    RBRACKET        reduce using rule 20 (basic_expr -> STRING .)
    RPAREN          reduce using rule 20 (basic_expr -> STRING .)
    RBRACE          reduce using rule 20 (basic_expr -> STRING .)
    LBRACE          reduce using rule 20 (basic_expr -> STRING .)


state 13

    (22) basic_expr -> DOLLAR . ATOM

    ATOM            shift and go to state 22


state 14

    (1) script -> if script .

    $end            reduce using rule 1 (script -> if script .)
    COMMA           reduce using rule 1 (script -> if script .)
    RBRACKET        reduce using rule 1 (script -> if script .)
    RPAREN          reduce using rule 1 (script -> if script .)
    RBRACE          reduce using rule 1 (script -> if script .)


state 15

    (3) if -> IF assignment . block
    (4) if -> IF assignment . block ELSE block
    (16) block -> . LBRACE script RBRACE
    (17) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 23

state 16

    (6) assignment -> ATOM EQ . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    ATOM            shift and go to state 25
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    call                           shift and go to state 26
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 17

    (8) call -> ATOM LPAREN . call_args RPAREN
    (9) call -> ATOM LPAREN . RPAREN
    (18) call_args -> . script COMMA call_args
    (19) call_args -> . script
    (1) script -> . if script
    (2) script -> . if
    (3) if -> . IF assignment block
    (4) if -> . IF assignment block ELSE block
    (5) if -> . assignment
    (6) assignment -> . ATOM EQ call
    (7) assignment -> . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    RPAREN          shift and go to state 28
    IF              shift and go to state 3
    ATOM            shift and go to state 5
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    call_args                      shift and go to state 27
    script                         shift and go to state 20
    if                             shift and go to state 2
    assignment                     shift and go to state 4
    call                           shift and go to state 6
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 18

    (11) list -> LBRACKET RBRACKET .

    IF              reduce using rule 11 (list -> LBRACKET RBRACKET .)
    ATOM            reduce using rule 11 (list -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 11 (list -> LBRACKET RBRACKET .)
    SCENARIO        reduce using rule 11 (list -> LBRACKET RBRACKET .)
    STRING          reduce using rule 11 (list -> LBRACKET RBRACKET .)
    DOLLAR          reduce using rule 11 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 11 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 11 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 11 (list -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 11 (list -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 11 (list -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 11 (list -> LBRACKET RBRACKET .)


state 19

    (12) list -> LBRACKET call_args . RBRACKET

    RBRACKET        shift and go to state 29


state 20

    (18) call_args -> script . COMMA call_args
    (19) call_args -> script .

    COMMA           shift and go to state 30
    RBRACKET        reduce using rule 19 (call_args -> script .)
    RPAREN          reduce using rule 19 (call_args -> script .)


state 21

    (14) scenario -> SCENARIO ATOM . block
    (16) block -> . LBRACE script RBRACE
    (17) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 31

state 22

    (22) basic_expr -> DOLLAR ATOM .

    IF              reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    ATOM            reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    LBRACKET        reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    SCENARIO        reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    STRING          reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    DOLLAR          reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    $end            reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    COMMA           reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    RBRACKET        reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    RPAREN          reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    RBRACE          reduce using rule 22 (basic_expr -> DOLLAR ATOM .)
    LBRACE          reduce using rule 22 (basic_expr -> DOLLAR ATOM .)


state 23

    (3) if -> IF assignment block .
    (4) if -> IF assignment block . ELSE block

    IF              reduce using rule 3 (if -> IF assignment block .)
    ATOM            reduce using rule 3 (if -> IF assignment block .)
    LBRACKET        reduce using rule 3 (if -> IF assignment block .)
    SCENARIO        reduce using rule 3 (if -> IF assignment block .)
    STRING          reduce using rule 3 (if -> IF assignment block .)
    DOLLAR          reduce using rule 3 (if -> IF assignment block .)
    $end            reduce using rule 3 (if -> IF assignment block .)
    COMMA           reduce using rule 3 (if -> IF assignment block .)
    RBRACKET        reduce using rule 3 (if -> IF assignment block .)
    RPAREN          reduce using rule 3 (if -> IF assignment block .)
    RBRACE          reduce using rule 3 (if -> IF assignment block .)
    ELSE            shift and go to state 32


state 24

    (16) block -> LBRACE . script RBRACE
    (17) block -> LBRACE . RBRACE
    (1) script -> . if script
    (2) script -> . if
    (3) if -> . IF assignment block
    (4) if -> . IF assignment block ELSE block
    (5) if -> . assignment
    (6) assignment -> . ATOM EQ call
    (7) assignment -> . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    RBRACE          shift and go to state 34
    IF              shift and go to state 3
    ATOM            shift and go to state 5
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    script                         shift and go to state 33
    if                             shift and go to state 2
    assignment                     shift and go to state 4
    call                           shift and go to state 6
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 25

    (8) call -> ATOM . LPAREN call_args RPAREN
    (9) call -> ATOM . LPAREN RPAREN
    (21) basic_expr -> ATOM .

    LPAREN          shift and go to state 17
    IF              reduce using rule 21 (basic_expr -> ATOM .)
    ATOM            reduce using rule 21 (basic_expr -> ATOM .)
    LBRACKET        reduce using rule 21 (basic_expr -> ATOM .)
    SCENARIO        reduce using rule 21 (basic_expr -> ATOM .)
    STRING          reduce using rule 21 (basic_expr -> ATOM .)
    DOLLAR          reduce using rule 21 (basic_expr -> ATOM .)
    $end            reduce using rule 21 (basic_expr -> ATOM .)
    COMMA           reduce using rule 21 (basic_expr -> ATOM .)
    RBRACKET        reduce using rule 21 (basic_expr -> ATOM .)
    RPAREN          reduce using rule 21 (basic_expr -> ATOM .)
    RBRACE          reduce using rule 21 (basic_expr -> ATOM .)
    LBRACE          reduce using rule 21 (basic_expr -> ATOM .)


state 26

    (6) assignment -> ATOM EQ call .

    IF              reduce using rule 6 (assignment -> ATOM EQ call .)
    ATOM            reduce using rule 6 (assignment -> ATOM EQ call .)
    LBRACKET        reduce using rule 6 (assignment -> ATOM EQ call .)
    SCENARIO        reduce using rule 6 (assignment -> ATOM EQ call .)
    STRING          reduce using rule 6 (assignment -> ATOM EQ call .)
    DOLLAR          reduce using rule 6 (assignment -> ATOM EQ call .)
    $end            reduce using rule 6 (assignment -> ATOM EQ call .)
    COMMA           reduce using rule 6 (assignment -> ATOM EQ call .)
    RBRACKET        reduce using rule 6 (assignment -> ATOM EQ call .)
    RPAREN          reduce using rule 6 (assignment -> ATOM EQ call .)
    RBRACE          reduce using rule 6 (assignment -> ATOM EQ call .)
    LBRACE          reduce using rule 6 (assignment -> ATOM EQ call .)


state 27

    (8) call -> ATOM LPAREN call_args . RPAREN

    RPAREN          shift and go to state 35


state 28

    (9) call -> ATOM LPAREN RPAREN .

    IF              reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    ATOM            reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    LBRACKET        reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    SCENARIO        reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    STRING          reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    DOLLAR          reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    $end            reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    COMMA           reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    RBRACKET        reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    RPAREN          reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    RBRACE          reduce using rule 9 (call -> ATOM LPAREN RPAREN .)
    LBRACE          reduce using rule 9 (call -> ATOM LPAREN RPAREN .)


state 29

    (12) list -> LBRACKET call_args RBRACKET .

    IF              reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    ATOM            reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    LBRACKET        reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    SCENARIO        reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    STRING          reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    DOLLAR          reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    $end            reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    COMMA           reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    RBRACKET        reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    RPAREN          reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    RBRACE          reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)
    LBRACE          reduce using rule 12 (list -> LBRACKET call_args RBRACKET .)


state 30

    (18) call_args -> script COMMA . call_args
    (18) call_args -> . script COMMA call_args
    (19) call_args -> . script
    (1) script -> . if script
    (2) script -> . if
    (3) if -> . IF assignment block
    (4) if -> . IF assignment block ELSE block
    (5) if -> . assignment
    (6) assignment -> . ATOM EQ call
    (7) assignment -> . call
    (8) call -> . ATOM LPAREN call_args RPAREN
    (9) call -> . ATOM LPAREN RPAREN
    (10) call -> . list
    (11) list -> . LBRACKET RBRACKET
    (12) list -> . LBRACKET call_args RBRACKET
    (13) list -> . scenario
    (14) scenario -> . SCENARIO ATOM block
    (15) scenario -> . basic_expr
    (20) basic_expr -> . STRING
    (21) basic_expr -> . ATOM
    (22) basic_expr -> . DOLLAR ATOM

    IF              shift and go to state 3
    ATOM            shift and go to state 5
    LBRACKET        shift and go to state 8
    SCENARIO        shift and go to state 10
    STRING          shift and go to state 12
    DOLLAR          shift and go to state 13

    script                         shift and go to state 20
    call_args                      shift and go to state 36
    if                             shift and go to state 2
    assignment                     shift and go to state 4
    call                           shift and go to state 6
    list                           shift and go to state 7
    scenario                       shift and go to state 9
    basic_expr                     shift and go to state 11

state 31

    (14) scenario -> SCENARIO ATOM block .

    IF              reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    ATOM            reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    LBRACKET        reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    SCENARIO        reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    STRING          reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    DOLLAR          reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    $end            reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    COMMA           reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    RBRACKET        reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    RPAREN          reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    RBRACE          reduce using rule 14 (scenario -> SCENARIO ATOM block .)
    LBRACE          reduce using rule 14 (scenario -> SCENARIO ATOM block .)


state 32

    (4) if -> IF assignment block ELSE . block
    (16) block -> . LBRACE script RBRACE
    (17) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 37

state 33

    (16) block -> LBRACE script . RBRACE

    RBRACE          shift and go to state 38


state 34

    (17) block -> LBRACE RBRACE .

    ELSE            reduce using rule 17 (block -> LBRACE RBRACE .)
    IF              reduce using rule 17 (block -> LBRACE RBRACE .)
    ATOM            reduce using rule 17 (block -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 17 (block -> LBRACE RBRACE .)
    SCENARIO        reduce using rule 17 (block -> LBRACE RBRACE .)
    STRING          reduce using rule 17 (block -> LBRACE RBRACE .)
    DOLLAR          reduce using rule 17 (block -> LBRACE RBRACE .)
    $end            reduce using rule 17 (block -> LBRACE RBRACE .)
    COMMA           reduce using rule 17 (block -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 17 (block -> LBRACE RBRACE .)
    RPAREN          reduce using rule 17 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 17 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 17 (block -> LBRACE RBRACE .)


state 35

    (8) call -> ATOM LPAREN call_args RPAREN .

    IF              reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    ATOM            reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    LBRACKET        reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    SCENARIO        reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    STRING          reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    DOLLAR          reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    $end            reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    COMMA           reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    RBRACE          reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)
    LBRACE          reduce using rule 8 (call -> ATOM LPAREN call_args RPAREN .)


state 36

    (18) call_args -> script COMMA call_args .

    RBRACKET        reduce using rule 18 (call_args -> script COMMA call_args .)
    RPAREN          reduce using rule 18 (call_args -> script COMMA call_args .)


state 37

    (4) if -> IF assignment block ELSE block .

    IF              reduce using rule 4 (if -> IF assignment block ELSE block .)
    ATOM            reduce using rule 4 (if -> IF assignment block ELSE block .)
    LBRACKET        reduce using rule 4 (if -> IF assignment block ELSE block .)
    SCENARIO        reduce using rule 4 (if -> IF assignment block ELSE block .)
    STRING          reduce using rule 4 (if -> IF assignment block ELSE block .)
    DOLLAR          reduce using rule 4 (if -> IF assignment block ELSE block .)
    $end            reduce using rule 4 (if -> IF assignment block ELSE block .)
    COMMA           reduce using rule 4 (if -> IF assignment block ELSE block .)
    RBRACKET        reduce using rule 4 (if -> IF assignment block ELSE block .)
    RPAREN          reduce using rule 4 (if -> IF assignment block ELSE block .)
    RBRACE          reduce using rule 4 (if -> IF assignment block ELSE block .)


state 38

    (16) block -> LBRACE script RBRACE .

    ELSE            reduce using rule 16 (block -> LBRACE script RBRACE .)
    IF              reduce using rule 16 (block -> LBRACE script RBRACE .)
    ATOM            reduce using rule 16 (block -> LBRACE script RBRACE .)
    LBRACKET        reduce using rule 16 (block -> LBRACE script RBRACE .)
    SCENARIO        reduce using rule 16 (block -> LBRACE script RBRACE .)
    STRING          reduce using rule 16 (block -> LBRACE script RBRACE .)
    DOLLAR          reduce using rule 16 (block -> LBRACE script RBRACE .)
    $end            reduce using rule 16 (block -> LBRACE script RBRACE .)
    COMMA           reduce using rule 16 (block -> LBRACE script RBRACE .)
    RBRACKET        reduce using rule 16 (block -> LBRACE script RBRACE .)
    RPAREN          reduce using rule 16 (block -> LBRACE script RBRACE .)
    RBRACE          reduce using rule 16 (block -> LBRACE script RBRACE .)
    LBRACE          reduce using rule 16 (block -> LBRACE script RBRACE .)

