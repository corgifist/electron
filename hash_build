build_arch = "64"
base_exec_name = "electron"
if eq(get_platform(), windows) {
    target_exec = "electron.exe"
    dylib_prefix = ".dll"
    dylib_id = "lib"
    object_add_link_options(mwindows)
} else {
    target_exec = "electron"
    dylib_prefix = ".so"
    dylib_id = "lib"
}
print(cat("Platform: ", get_platform()))

load_module("misc/scripts/electron_build_utils.py")

std_cxx = "20"

object_add_link_options(m64)

impl_target_file = null

object_add_compile_options(fPIC)
object_add_compile_options(g) # include debug symbols
object_add_compile_options(Werror)
object_add_compile_options("Wno-unused")
object_add_compile_options("I /usr/include/")
dump_compilation_commands(0)

target_impls = [
    project_configuration_impl,
    render_preview_impl,
    layer_properties_impl,
    asset_manager_impl,
    dockspace_impl,
    timeline_impl,
    asset_examiner_impl,
    async_writer,
    audio_server
]

target_layers = [
    sdf2d_layer,
    audio_layer
]

scenario build_imgui {
    info("Building ImGui shared library")

    imgui_targets = glob_files("src/ImGui/", "cpp")
    imgui_objects = object_compile(
        $imgui_targets,
        $build_arch
    )
    if eq(get_platform(), windows) {
        deps = [opengl32, glfw]
    } else {
        deps = [glfw]
    }

    link_executable($imgui_objects, cat($dylib_id, cat("imgui", $dylib_prefix)), $deps, shared, imgui, "libs")
    move_shared_libs()
}

scenario build_core {
    info("starting Electron build")
    object_add_compile_definition("GLEW_STATIC")
    compilation_targets = cat(glob_files("src", "cpp"), glob_files("src", "c"))
    compilation_targets = filter_list_from_string($compilation_targets, "imgui")
    compilation_targets = filter_list_from_string($compilation_targets, "ImGui")
    compilation_targets = filter_list_from_string($compilation_targets, "implot")
    compilation_targets = filter_list_from_string($compilation_targets, "electron.cpp")
    objects = object_compile(
        $compilation_targets,
        $build_arch, [], "libs"
    )

    deps = list()
    if eq(get_platform(), windows) {
        deps = [
            opengl32, SDL1, windowscodecs, ole32, shlwapi, pthread, dbgeng, backtrace, dbgeng, bfd, dbghelp, imgui, curl, kernel32, user32, gdi32, winspool, comdlg32, advapi32, shell32, oleaut32, uuid, comctl32, wsock32, ldap, odbc32, z, ssl, crypto, crypt32, nghttp2
        ]
    } else {
        deps = [
            glfw, m, pthread, "stdc++", dl, backtrace, bfd, unwind, xcb, curl, imgui, boost_filesystem, "decor-0"
        ]
    }

    if eq(get_platform(), windows) {
        object_add_link_options(static)
        object_add_link_options("static-libstdc++")
    } else {
        object_add_link_options("rdynamic")
    }
    link_executable($objects, cat($dylib_id, cat($base_exec_name, $dylib_prefix)), $deps, shared, electron, "libs")
    move_shared_libs()
}

scenario build_starter {
    starter_targets = ["src/electron.cpp"]
    starter_objects = object_compile($starter_targets, $build_arch, [], "libs")
    link_executable($starter_objects, "electron", 
        [electron, imgui, glfw, bfd, unwind], null, electron, "libs"
    )
    move_shared_libs()
}

scenario build_impl {
    info(cat("compiling impl ", $impl_target_file))

    shared_library_name = cat($dylib_id, cat($impl_target_file, $dylib_prefix))
    object_set_include_path("src/")
    impl_objects = object_compile(cat(cat("impl/", $impl_target_file), ".cpp"), $build_arch, [], "libs")

    impl_deps = list()
    if eq(get_platform(), windows) {
        impl_deps = [
            pthread, dbgeng, backtrace, bfd, dbghelp, imgui, electron
        ]
    } else {
        impl_deps = [
            "stdc++", dl, pthread, backtrace, bfd, unwind dl
        ]
    }
    if eq($impl_target_file, audio_server) {
        impl_deps = cat($impl_deps, [openal])
    }
    link_executable($impl_objects, $shared_library_name, $impl_deps, shared, "implib", "libs")
    move_shared_libs()
}

scenario build_layer {
    call_scenario(build_impl)
    mv(cat("libs/", cat($dylib_id, cat($impl_target_file, $dylib_prefix))), cat("layers/", cat($dylib_id, cat($impl_target_file, $dylib_prefix))))
}

scenario clean {
    if path_exists($target_exec) {
        rm($target_exec) 
    }
    if path_exists("layers/") {
        rmtree("layers")
    }

    mkdir("layers")
    object_clean()

    for_each($target_impls, shared_lib_name, clean_shared_library)
}

scenario clean_shared_library {
    rm_path = cat($shared_lib_name, $dylib_prefix)
    if path_exists($rm_path) {
        rm($rm_path)
    }
}

scenario build {
    if path_exists($target_exec) {
        rm($target_exec)
    }
    if not(path_exists("layers/")) {
        mkdir("layers")
    }
    if not(path_exists("libs/")) {
        mkdir("libs")
    }
    move_shared_libs()
    write_build_number()
    call_scenario(build_imgui)
    call_scenario(build_core)
    call_scenario(build_starter)

    object_add_compile_definition(ELECTRON_IMPLEMENTATION_MODE)
    for_each($target_impls, impl_target_file, execute_build_impl)
    for_each($target_layers, impl_target_file, execute_build_layer)
    move_shared_libs()
}

scenario execute_build_impl {
    call_scenario(build_impl)
}

scenario execute_build_layer {
    call_scenario(build_layer)
}


default_scenario = build